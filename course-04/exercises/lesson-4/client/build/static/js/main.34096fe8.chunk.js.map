{"version":3,"sources":["components/Group.tsx","config.ts","api/groups-api.ts","components/GroupsList.tsx","api/images-api.ts","components/CreateImage.tsx","components/UdagramImage.tsx","components/ImagesList.tsx","components/NotFound.tsx","components/CreateGroup.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Group","_React$PureComponent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","Card","Content","Header","react_router_dom","to","concat","props","group","id","name","Description","description","React","apiEndpoint","getGroups","_getGroups","_callee","response","result","regenerator_default","a","wrap","_context","prev","next","console","log","fetch","sent","json","abrupt","items","stop","createGroup","_x","_createGroup","_callee2","newGroup","reply","_context2","method","headers","Content-Type","body","JSON","stringify","newItem","GroupsList","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","state","groups","handleCreateGroup","history","push","_componentDidMount","asyncToGenerator","mark","setState","t0","alert","message","Button","primary","size","className","onClick","Divider","clearing","map","Group_Group","getImages","_getImages","groupId","createImage","_x2","_createImage","newImage","title","uploadFile","_x3","_x4","_uploadFile","_callee3","uploadUrl","file","_context3","UploadState","UdagramImage","fluid","color","image","timestamp","imageUrl","Image","src","ImagesList","images","handleCreateImage","match","params","UdagramImage_UdagramImage","imageId","NotFound","CreateImage","undefined","uploadState","NoUpload","handleTitleChange","event","target","handleFileChange","files","handleSubmit","_ref","uploadInfo","preventDefault","setUploadState","UploadingData","UploadingFile","finish","Form","onSubmit","Field","placeholder","onChange","type","accept","renderButton","loading","CreateGroup","uploadingGroup","handleNameChange","handleDescriptionChange","App","react_default","createElement","Segment","style","padding","vertical","Grid","container","stackable","verticalAlign","Row","Column","width","generateMenu","generateCurrentPage","Menu","Item","react_router","path","exact","component","Component","Boolean","window","location","hostname","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34096fe8.chunk.js","sourcesContent":["import * as React from 'react'\nimport { Card } from 'semantic-ui-react'\nimport { GroupModel } from '../types/GroupModel'\nimport { Link } from 'react-router-dom'\n\ninterface GroupCardProps {\n  group: GroupModel\n}\n\ninterface GroupCardState {\n}\n\nexport class Group extends React.PureComponent<GroupCardProps, GroupCardState> {\n\n  render() {\n    return (\n      <Card>\n        <Card.Content>\n          <Card.Header>\n            <Link to={`/images/${this.props.group.id}`}>{this.props.group.name}</Link>\n          </Card.Header>\n          <Card.Description>{this.props.group.description}</Card.Description>\n        </Card.Content>\n      </Card>\n    )\n  }\n}\n","export const apiEndpoint = '...'\n","import { GroupModel } from '../types/GroupModel'\nimport { apiEndpoint } from '../config'\nimport { GroupUploadInfo } from '../types/GroupUploadInfo'\n\nexport async function getGroups(): Promise<GroupModel[]> {\n  console.log('Fetching groups')\n\n  const response = await fetch(`${apiEndpoint}/groups`)\n  const result = await response.json()\n\n  return result.items\n}\n\nexport async function createGroup(newGroup: GroupUploadInfo): Promise<GroupModel> {\n\n  const reply = await fetch(`${apiEndpoint}/groups`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: newGroup.name,\n      description: newGroup.description\n    })\n  })\n  const result = await reply.json();\n  return result.newItem\n}\n","import * as React from 'react'\nimport { GroupModel } from '../types/GroupModel'\nimport { Group } from './Group'\nimport { getGroups } from '../api/groups-api'\nimport { Card, Button, Divider } from 'semantic-ui-react'\nimport { History } from 'history'\n\ninterface GroupsListProps {\n  history: History\n}\n\ninterface GroupsListState {\n  groups: GroupModel[]\n}\n\nexport class GroupsList extends React.PureComponent<GroupsListProps, GroupsListState> {\n  state: GroupsListState = {\n    groups: []\n  }\n\n  handleCreateGroup = () => {\n    this.props.history.push(`/groups/create`)\n  }\n\n  async componentDidMount() {\n    try {\n      const groups = await getGroups()\n      this.setState({\n        groups\n      })\n    } catch (e) {\n      alert(`Failed to fetch groups: ${e.message}`)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Groups</h1>\n\n        <Button\n          primary\n          size=\"huge\"\n          className=\"add-button\"\n          onClick={this.handleCreateGroup}\n        >\n          Create new group\n        </Button>\n\n        <Divider clearing />\n\n        <Card.Group>\n          {this.state.groups.map(group => {\n            return <Group key={group.id} group={group} />\n          })}\n        </Card.Group>\n      </div>\n    )\n  }\n}\n","import { apiEndpoint } from '../config'\nimport { ImageModel } from '../types/ImageModel'\nimport { ImageUploadInfo } from '../types/ImageUploadInfo'\nimport { ImageUploadResponse } from '../types/ImageUploadResponse'\n\nexport async function getImages(groupId: string): Promise<ImageModel[]> {\n  console.log('Fetching images')\n  const response = await fetch(`${apiEndpoint}/groups/${groupId}/images`)\n  const result = await response.json()\n\n  return result.items\n}\n\nexport async function createImage(\n  newImage: ImageUploadInfo\n): Promise<ImageUploadResponse> {\n\n  const reply = await fetch(\n    `${apiEndpoint}/groups/${newImage.groupId}/images`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title: newImage.title\n      })\n    }\n  )\n\n  return await reply.json()\n}\n\nexport async function uploadFile(uploadUrl: string, file: Buffer): Promise<void> {\n  await fetch(uploadUrl, {\n    method: 'PUT',\n    body: file\n  })\n}\n","import * as React from 'react'\nimport { Form, Button } from 'semantic-ui-react'\nimport { createImage, uploadFile } from '../api/images-api'\n\nenum UploadState {\n  NoUpload,\n  UploadingData,\n  UploadingFile\n}\n\ninterface CreateImageProps {\n  match: {\n    params: {\n      groupId: string\n    }\n  }\n}\n\ninterface CreateImageState {\n  title: string\n  file: any\n  uploadState: UploadState\n}\n\nexport class CreateImage extends React.PureComponent<\n  CreateImageProps,\n  CreateImageState\n> {\n  state: CreateImageState = {\n    title: '',\n    file: undefined,\n    uploadState: UploadState.NoUpload\n  }\n\n  handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ title: event.target.value })\n  }\n\n  handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files\n    if (!files) return\n\n    console.log('File change', files)\n    this.setState({\n      file: files[0]\n    })\n  }\n\n  handleSubmit = async (event: React.SyntheticEvent) => {\n    event.preventDefault()\n\n    try {\n      if (!this.state.file) {\n        alert('File should be selected')\n        return\n      }\n\n      this.setUploadState(UploadState.UploadingData)\n      const uploadInfo = await createImage({\n        groupId: this.props.match.params.groupId,\n        title: this.state.title\n      })\n\n      console.log('Created image', uploadInfo)\n\n      this.setUploadState(UploadState.UploadingFile)\n      await uploadFile(uploadInfo.uploadUrl, this.state.file)\n\n      alert('Image was uploaded!')\n    } catch (e) {\n      alert('Could not upload an image: ' + e.message)\n    } finally {\n      this.setUploadState(UploadState.NoUpload)\n    }\n  }\n\n  setUploadState(uploadState: UploadState) {\n    this.setState({\n      uploadState\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Upload new image</h1>\n\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Field>\n            <label>Title</label>\n            <input\n              placeholder=\"Image title\"\n              value={this.state.title}\n              onChange={this.handleTitleChange}\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Image</label>\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              placeholder=\"Image to upload\"\n              onChange={this.handleFileChange}\n            />\n          </Form.Field>\n\n          {this.renderButton()}\n        </Form>\n      </div>\n    )\n  }\n\n  renderButton() {\n\n    return (\n      <div>\n        {this.state.uploadState === UploadState.UploadingData && <p>Uploading image metadata</p>}\n        {this.state.uploadState === UploadState.UploadingFile && <p>Uploading file</p>}\n        <Button\n          loading={this.state.uploadState !== UploadState.NoUpload}\n          type=\"submit\"\n        >\n          Upload\n        </Button>\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { Card, Image } from 'semantic-ui-react'\nimport { ImageModel } from '../types/ImageModel'\n\ninterface ImageCardProps {\n  image: ImageModel\n}\n\ninterface ImageCardState {}\n\nexport class UdagramImage extends React.PureComponent<\n  ImageCardProps,\n  ImageCardState\n> {\n\n  render() {\n    return (\n      <Card fluid color=\"red\">\n        <Card.Content>\n          <Card.Header>{this.props.image.title}</Card.Header>\n          <Card.Description>{this.props.image.timestamp}</Card.Description>\n          {this.props.image.imageUrl && (\n            <Image src={this.props.image.imageUrl} />\n          )}\n        </Card.Content>\n      </Card>\n    )\n  }\n}\n","import * as React from 'react'\nimport { ImageModel } from '../types/ImageModel'\nimport { getImages } from '../api/images-api'\nimport { Card, Divider, Button } from 'semantic-ui-react'\nimport { UdagramImage } from './UdagramImage'\nimport { History } from 'history'\n\ninterface ImagesListProps {\n  history: History\n  match: {\n    params: {\n      groupId: string\n    }\n  }\n}\n\ninterface ImagesListState {\n  images: ImageModel[]\n}\n\nexport class ImagesList extends React.PureComponent<\n  ImagesListProps,\n  ImagesListState\n> {\n  state: ImagesListState = {\n    images: []\n  }\n\n  handleCreateImage = () => {\n    this.props.history.push(`/images/${this.props.match.params.groupId}/create`)\n  }\n\n  async componentDidMount() {\n    try {\n      const images = await getImages(this.props.match.params.groupId)\n      this.setState({\n        images\n      })\n    } catch (e) {\n      alert(`Failed to fetch images for group : ${e.message}`)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Images</h1>\n\n        <Button\n          primary\n          size=\"huge\"\n          className=\"add-button\"\n          onClick={this.handleCreateImage}\n        >\n          Upload new image\n        </Button>\n\n        <Divider clearing />\n\n        <Card.Group>\n          {this.state.images.map(image => {\n            return <UdagramImage key={image.imageId} image={image} />\n          })}\n        </Card.Group>\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\n\ninterface NotFoundProps {\n}\n\ninterface NotFoundState {\n}\n\nexport class NotFound extends React.PureComponent<NotFoundProps, NotFoundState> {\n  render() {\n    return <h1>Not Found</h1>\n  }\n}\n","import * as React from 'react'\nimport { Form, Button } from 'semantic-ui-react'\nimport { createGroup } from '../api/groups-api'\n\ninterface CreateGroupProps {}\n\ninterface CreateGroupState {\n  name: string\n  description: string\n  uploadingGroup: boolean\n}\n\nexport class CreateGroup extends React.PureComponent<\n  CreateGroupProps,\n  CreateGroupState\n> {\n  state: CreateGroupState = {\n    name: '',\n    description: '',\n    uploadingGroup: false\n  }\n\n  handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ name: event.target.value })\n  }\n\n  handleDescriptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ description: event.target.value })\n  }\n\n  handleSubmit = async (event: React.SyntheticEvent) => {\n    event.preventDefault()\n\n    try {\n      if (!this.state.name || !this.state.description) {\n        alert('Name and description should be provided')\n        return\n      }\n\n      this.setUploadState(true)\n      const group = await createGroup({\n        name: this.state.name,\n        description: this.state.description\n      })\n\n      console.log('Created description', group)\n\n      alert('Group was created!')\n    } catch (e) {\n      alert('Could not upload an image: ' + e.message)\n    } finally {\n      this.setUploadState(false)\n    }\n  }\n\n  setUploadState(uploadingGroup: boolean) {\n    this.setState({\n      uploadingGroup\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Upload new group</h1>\n\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Field>\n            <label>Name</label>\n            <input\n              placeholder=\"Group name\"\n              value={this.state.name}\n              onChange={this.handleNameChange}\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Description</label>\n            <input\n              placeholder=\"Group description\"\n              value={this.state.description}\n              onChange={this.handleDescriptionChange}\n            />\n          </Form.Field>\n          {this.renderButton()}\n        </Form>\n      </div>\n    )\n  }\n\n  renderButton() {\n    return (\n      <Button loading={this.state.uploadingGroup} type=\"submit\">\n        Create\n      </Button>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { GroupsList } from './components/GroupsList'\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom'\nimport { Grid, Menu, Segment } from 'semantic-ui-react'\nimport { ImagesList } from './components/ImagesList'\nimport { NotFound } from './components/NotFound'\nimport { CreateImage } from './components/CreateImage'\nimport { CreateGroup } from './components/CreateGroup'\n\nexport interface AppProps {}\nexport interface AppState {}\n\nexport default class App extends Component<AppProps, AppState> {\n  render() {\n    return (\n      <div>\n        <Segment style={{ padding: '8em 0em' }} vertical>\n          <Grid container stackable verticalAlign=\"middle\">\n            <Grid.Row>\n              <Grid.Column width={16}>\n                <Router>\n                  {this.generateMenu()}\n\n                  {this.generateCurrentPage()}\n                </Router>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Segment>\n      </div>\n    )\n  }\n\n  generateMenu() {\n    return (\n      <Menu>\n        <Menu.Item name=\"home\">\n          <Link to=\"/\">Home</Link>\n        </Menu.Item>\n      </Menu>\n    )\n  }\n\n  generateCurrentPage() {\n    return (\n      <Switch>\n        <Route path=\"/groups/create\" exact component={CreateGroup} />\n\n        <Route path=\"/images/:groupId\" exact component={ImagesList} />\n\n        <Route path=\"/images/:groupId/create\" exact component={CreateImage} />\n\n        <Route path=\"/\" exact component={GroupsList} />\n\n        <Route component={NotFound} />\n      </Switch>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}